"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/getNftsForCollection";
exports.ids = ["pages/api/getNftsForCollection"];
exports.modules = {

/***/ "alchemy-sdk":
/*!******************************!*\
  !*** external "alchemy-sdk" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("alchemy-sdk");

/***/ }),

/***/ "(api)/./pages/api/getNftsForCollection.js":
/*!*******************************************!*\
  !*** ./pages/api/getNftsForCollection.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alchemy-sdk */ \"alchemy-sdk\");\n/* harmony import */ var alchemy_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__);\n// Importing Network and Alchemy from alchemy-sdk module\n\n// Defining an async function called handler that accepts req and res objects\nasync function handler(req, res) {\n    // Extracting data from the request body\n    const { address , pageKey , pageSize , chain , excludeFilters  } = JSON.parse(req.body);\n    // Checking if the request method is POST\n    if (req.method !== \"POST\") {\n        // If not, sending a 405 error response\n        res.status(405).send({\n            message: \"Only POST requests allowed\"\n        });\n        return;\n    }\n    // Logging the chain value\n    console.log(chain);\n    // Creating an object with API key and network settings\n    const settings = {\n        apiKey: process.env.ALCHEMY_API_KEY,\n        network: alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.Network[chain]\n    };\n    // Creating a new Alchemy object using the settings object\n    const alchemy = new alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.Alchemy(settings);\n    try {\n        // Fetching NFTs for a given contract address from Alchemy API\n        const nfts = await alchemy.nft.getNftsForContract(address, {\n            pageKey: pageKey ? pageKey : null,\n            pageSize: pageSize ? pageSize : null\n        });\n        // Formatting the fetched NFTs data to a desired format\n        const formattedNfts = nfts.nfts.map((nft)=>{\n            const { contract , title , tokenType , tokenId , description , media  } = nft;\n            return {\n                contract: contract.address,\n                symbol: contract.symbol,\n                media: media[0]?.gateway,\n                format: media[0]?.format,\n                collectionName: contract.openSea?.collectionName,\n                verified: contract.openSea?.safelistRequestStatus,\n                tokenType,\n                tokenId,\n                title,\n                description\n            };\n        });\n        // Logging the formatted NFTs\n        console.log(formattedNfts);\n        // Sending a success response with the formatted NFTs data and pageKey\n        res.status(200).json({\n            nfts: formattedNfts,\n            pageKey: nfts.pageKey\n        });\n    } catch (e) {\n        // If any error occurs, sending a 500 error response\n        console.warn(e);\n        res.status(500).send({\n            message: \"something went wrong, check the log in your terminal\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvZ2V0TmZ0c0ZvckNvbGxlY3Rpb24uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsd0RBQXdEO0FBQ1Q7QUFFL0MsNkVBQTZFO0FBQzlELGVBQWVFLFFBQVFDLEdBQUcsRUFBRUMsR0FBRztJQUM1Qyx3Q0FBd0M7SUFDeEMsTUFBTSxFQUFFQyxRQUFPLEVBQUVDLFFBQU8sRUFBRUMsU0FBUSxFQUFFQyxNQUFLLEVBQUVDLGVBQWMsRUFBRSxHQUFHQyxLQUFLQyxNQUNqRVIsSUFBSVM7SUFHTix5Q0FBeUM7SUFDekMsSUFBSVQsSUFBSVUsV0FBVyxRQUFRO1FBQ3pCLHVDQUF1QztRQUN2Q1QsSUFBSVUsT0FBTyxLQUFLQyxLQUFLO1lBQUVDLFNBQVM7UUFBNkI7UUFDN0Q7SUFDRjtJQUVBLDBCQUEwQjtJQUMxQkMsUUFBUUMsSUFBSVY7SUFFWix1REFBdUQ7SUFDdkQsTUFBTVcsV0FBVztRQUNmQyxRQUFRQyxRQUFRQyxJQUFJQztRQUNwQkMsU0FBU3hCLGdEQUFPLENBQUNRLE1BQU07SUFDekI7SUFFQSwwREFBMEQ7SUFDMUQsTUFBTWlCLFVBQVUsSUFBSXhCLGdEQUFPQSxDQUFDa0I7SUFFNUIsSUFBSTtRQUNGLDhEQUE4RDtRQUM5RCxNQUFNTyxPQUFPLE1BQU1ELFFBQVFFLElBQUlDLG1CQUFtQnZCLFNBQVM7WUFDekRDLFNBQVNBLFVBQVVBLFVBQVU7WUFDN0JDLFVBQVVBLFdBQVdBLFdBQVc7UUFDbEM7UUFFQSx1REFBdUQ7UUFDdkQsTUFBTXNCLGdCQUFnQkgsS0FBS0EsS0FBS0ksSUFBSSxDQUFDSDtZQUNuQyxNQUFNLEVBQUVJLFNBQVEsRUFBRUMsTUFBSyxFQUFFQyxVQUFTLEVBQUVDLFFBQU8sRUFBRUMsWUFBVyxFQUFFQyxNQUFLLEVBQUUsR0FBR1Q7WUFFcEUsT0FBTztnQkFDTEksVUFBVUEsU0FBUzFCO2dCQUNuQmdDLFFBQVFOLFNBQVNNO2dCQUNqQkQsT0FBT0EsS0FBSyxDQUFDLEVBQUUsRUFBRUU7Z0JBQ2pCQyxRQUFRSCxLQUFLLENBQUMsRUFBRSxFQUFFRztnQkFDbEJDLGdCQUFnQlQsU0FBU1UsU0FBU0Q7Z0JBQ2xDRSxVQUFVWCxTQUFTVSxTQUFTRTtnQkFDNUJWO2dCQUNBQztnQkFDQUY7Z0JBQ0FHO1lBQ0Y7UUFDRjtRQUVBLDZCQUE2QjtRQUM3QmxCLFFBQVFDLElBQUlXO1FBRVosc0VBQXNFO1FBQ3RFekIsSUFBSVUsT0FBTyxLQUFLOEIsS0FBSztZQUNuQmxCLE1BQU1HO1lBQ052QixTQUFTb0IsS0FBS3BCO1FBQ2hCO0lBQ0YsRUFBRSxPQUFPdUMsR0FBRztRQUNWLG9EQUFvRDtRQUNwRDVCLFFBQVE2QixLQUFLRDtRQUNiekMsSUFBSVUsT0FBTyxLQUFLQyxLQUFLO1lBQ25CQyxTQUFTO1FBQ1g7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV3LWFwcC8uL3BhZ2VzL2FwaS9nZXROZnRzRm9yQ29sbGVjdGlvbi5qcz9iYWEwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydGluZyBOZXR3b3JrIGFuZCBBbGNoZW15IGZyb20gYWxjaGVteS1zZGsgbW9kdWxlXG5pbXBvcnQgeyBOZXR3b3JrLCBBbGNoZW15IH0gZnJvbSBcImFsY2hlbXktc2RrXCI7XG5cbi8vIERlZmluaW5nIGFuIGFzeW5jIGZ1bmN0aW9uIGNhbGxlZCBoYW5kbGVyIHRoYXQgYWNjZXB0cyByZXEgYW5kIHJlcyBvYmplY3RzXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XG4gIC8vIEV4dHJhY3RpbmcgZGF0YSBmcm9tIHRoZSByZXF1ZXN0IGJvZHlcbiAgY29uc3QgeyBhZGRyZXNzLCBwYWdlS2V5LCBwYWdlU2l6ZSwgY2hhaW4sIGV4Y2x1ZGVGaWx0ZXJzIH0gPSBKU09OLnBhcnNlKFxuICAgIHJlcS5ib2R5XG4gICk7XG5cbiAgLy8gQ2hlY2tpbmcgaWYgdGhlIHJlcXVlc3QgbWV0aG9kIGlzIFBPU1RcbiAgaWYgKHJlcS5tZXRob2QgIT09IFwiUE9TVFwiKSB7XG4gICAgLy8gSWYgbm90LCBzZW5kaW5nIGEgNDA1IGVycm9yIHJlc3BvbnNlXG4gICAgcmVzLnN0YXR1cyg0MDUpLnNlbmQoeyBtZXNzYWdlOiBcIk9ubHkgUE9TVCByZXF1ZXN0cyBhbGxvd2VkXCIgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gTG9nZ2luZyB0aGUgY2hhaW4gdmFsdWVcbiAgY29uc29sZS5sb2coY2hhaW4pO1xuXG4gIC8vIENyZWF0aW5nIGFuIG9iamVjdCB3aXRoIEFQSSBrZXkgYW5kIG5ldHdvcmsgc2V0dGluZ3NcbiAgY29uc3Qgc2V0dGluZ3MgPSB7XG4gICAgYXBpS2V5OiBwcm9jZXNzLmVudi5BTENIRU1ZX0FQSV9LRVksXG4gICAgbmV0d29yazogTmV0d29ya1tjaGFpbl0sXG4gIH07XG5cbiAgLy8gQ3JlYXRpbmcgYSBuZXcgQWxjaGVteSBvYmplY3QgdXNpbmcgdGhlIHNldHRpbmdzIG9iamVjdFxuICBjb25zdCBhbGNoZW15ID0gbmV3IEFsY2hlbXkoc2V0dGluZ3MpO1xuXG4gIHRyeSB7XG4gICAgLy8gRmV0Y2hpbmcgTkZUcyBmb3IgYSBnaXZlbiBjb250cmFjdCBhZGRyZXNzIGZyb20gQWxjaGVteSBBUElcbiAgICBjb25zdCBuZnRzID0gYXdhaXQgYWxjaGVteS5uZnQuZ2V0TmZ0c0ZvckNvbnRyYWN0KGFkZHJlc3MsIHtcbiAgICAgIHBhZ2VLZXk6IHBhZ2VLZXkgPyBwYWdlS2V5IDogbnVsbCxcbiAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZSA/IHBhZ2VTaXplIDogbnVsbCxcbiAgICB9KTtcblxuICAgIC8vIEZvcm1hdHRpbmcgdGhlIGZldGNoZWQgTkZUcyBkYXRhIHRvIGEgZGVzaXJlZCBmb3JtYXRcbiAgICBjb25zdCBmb3JtYXR0ZWROZnRzID0gbmZ0cy5uZnRzLm1hcCgobmZ0KSA9PiB7XG4gICAgICBjb25zdCB7IGNvbnRyYWN0LCB0aXRsZSwgdG9rZW5UeXBlLCB0b2tlbklkLCBkZXNjcmlwdGlvbiwgbWVkaWEgfSA9IG5mdDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udHJhY3Q6IGNvbnRyYWN0LmFkZHJlc3MsXG4gICAgICAgIHN5bWJvbDogY29udHJhY3Quc3ltYm9sLFxuICAgICAgICBtZWRpYTogbWVkaWFbMF0/LmdhdGV3YXksXG4gICAgICAgIGZvcm1hdDogbWVkaWFbMF0/LmZvcm1hdCxcbiAgICAgICAgY29sbGVjdGlvbk5hbWU6IGNvbnRyYWN0Lm9wZW5TZWE/LmNvbGxlY3Rpb25OYW1lLFxuICAgICAgICB2ZXJpZmllZDogY29udHJhY3Qub3BlblNlYT8uc2FmZWxpc3RSZXF1ZXN0U3RhdHVzLFxuICAgICAgICB0b2tlblR5cGUsXG4gICAgICAgIHRva2VuSWQsXG4gICAgICAgIHRpdGxlLFxuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBMb2dnaW5nIHRoZSBmb3JtYXR0ZWQgTkZUc1xuICAgIGNvbnNvbGUubG9nKGZvcm1hdHRlZE5mdHMpO1xuXG4gICAgLy8gU2VuZGluZyBhIHN1Y2Nlc3MgcmVzcG9uc2Ugd2l0aCB0aGUgZm9ybWF0dGVkIE5GVHMgZGF0YSBhbmQgcGFnZUtleVxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgIG5mdHM6IGZvcm1hdHRlZE5mdHMsXG4gICAgICBwYWdlS2V5OiBuZnRzLnBhZ2VLZXksXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJZiBhbnkgZXJyb3Igb2NjdXJzLCBzZW5kaW5nIGEgNTAwIGVycm9yIHJlc3BvbnNlXG4gICAgY29uc29sZS53YXJuKGUpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5zZW5kKHtcbiAgICAgIG1lc3NhZ2U6IFwic29tZXRoaW5nIHdlbnQgd3JvbmcsIGNoZWNrIHRoZSBsb2cgaW4geW91ciB0ZXJtaW5hbFwiLFxuICAgIH0pO1xuICB9XG59Il0sIm5hbWVzIjpbIk5ldHdvcmsiLCJBbGNoZW15IiwiaGFuZGxlciIsInJlcSIsInJlcyIsImFkZHJlc3MiLCJwYWdlS2V5IiwicGFnZVNpemUiLCJjaGFpbiIsImV4Y2x1ZGVGaWx0ZXJzIiwiSlNPTiIsInBhcnNlIiwiYm9keSIsIm1ldGhvZCIsInN0YXR1cyIsInNlbmQiLCJtZXNzYWdlIiwiY29uc29sZSIsImxvZyIsInNldHRpbmdzIiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIkFMQ0hFTVlfQVBJX0tFWSIsIm5ldHdvcmsiLCJhbGNoZW15IiwibmZ0cyIsIm5mdCIsImdldE5mdHNGb3JDb250cmFjdCIsImZvcm1hdHRlZE5mdHMiLCJtYXAiLCJjb250cmFjdCIsInRpdGxlIiwidG9rZW5UeXBlIiwidG9rZW5JZCIsImRlc2NyaXB0aW9uIiwibWVkaWEiLCJzeW1ib2wiLCJnYXRld2F5IiwiZm9ybWF0IiwiY29sbGVjdGlvbk5hbWUiLCJvcGVuU2VhIiwidmVyaWZpZWQiLCJzYWZlbGlzdFJlcXVlc3RTdGF0dXMiLCJqc29uIiwiZSIsIndhcm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/getNftsForCollection.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/getNftsForCollection.js"));
module.exports = __webpack_exports__;

})();